# Build and Deploy Workflow: Builds the app and deploys artifacts when a tag is pushed
# This workflow performs the following tasks:
# 1. Verifies that the tag version matches the version in package.json
# 2. Builds the app on macOS and Windows
# 3. Attaches built artifacts to the GitHub release
# 4. Creates a release in the opspresso/toast-dist repository
# 5. Triggers an update to the Homebrew tap
# This workflow is triggered by tags created in the push.yml workflow

name: Build and Release

on:
  push:
    tags:
      - 'v*' # Any tag starting with 'v'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: 'v0.0.0' # Default version for manual dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest] # List of OS to build on (ubuntu-latest removed)

    steps:
      - name: Checkout code 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch complete history

      - name: Verify tag matches package version (Unix) 🔍
        if: runner.os != 'Windows'
        id: verify_version_unix
        run: |
          # Remove 'v' prefix from tag name
          TAG_VERSION="${GITHUB_REF#refs/tags/}"
          TAG_VERSION="${TAG_VERSION#v}"
          echo "🏷️ Detected tag version: $TAG_VERSION"

          # Get version from package.json and remove 'v' prefix
          PKG_VERSION=$(jq -r .version package.json)
          PKG_VERSION="${PKG_VERSION#v}"
          echo "📦 Found package.json version: $PKG_VERSION"

          # Verify versions match
          echo "🔍 Verifying version consistency..."
          if [[ "$TAG_VERSION" != "$PKG_VERSION" ]]; then
            echo "❌ ERROR: Version mismatch detected!"
            echo "::error::Tag version ($TAG_VERSION) does not match package.json version ($PKG_VERSION)"
            echo "🛑 Build process cannot continue with inconsistent versions"
            exit 1
          fi

          echo "✅ Version verification passed: $TAG_VERSION"
          echo "🚀 Proceeding with build for version $TAG_VERSION"

      - name: Verify tag matches package version (Windows) 🔍
        if: runner.os == 'Windows'
        id: verify_version_windows
        shell: pwsh
        run: |
          # Remove 'v' prefix from tag name
          $TAG_VERSION = "$env:GITHUB_REF" -replace "refs/tags/", ""
          $TAG_VERSION = $TAG_VERSION -replace "^v", ""
          Write-Host "🏷️ Detected tag version: $TAG_VERSION"

          # Get version from package.json and remove 'v' prefix
          $PKG_VERSION = (Get-Content package.json | ConvertFrom-Json).version
          $PKG_VERSION = $PKG_VERSION -replace "^v", ""
          Write-Host "📦 Found package.json version: $PKG_VERSION"

          # Verify versions match
          Write-Host "🔍 Verifying version consistency..."
          if ($TAG_VERSION -ne $PKG_VERSION) {
            Write-Host "❌ ERROR: Version mismatch detected!"
            Write-Host "::error::Tag version ($TAG_VERSION) does not match package.json version ($PKG_VERSION)"
            Write-Host "🛑 Build process cannot continue with inconsistent versions"
            exit 1
          }

          Write-Host "✅ Version verification passed: $TAG_VERSION"
          Write-Host "🚀 Proceeding with build for version $TAG_VERSION"

      - name: Setup Node.js �
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm' # Use npm cache

      - name: Install dependencies 📦
        run: npm ci # Install dependencies

      - name: Configure environment variables 🔑
        run: |
          # Set environment variables needed for app execution
          echo "CLIENT_ID=${{ secrets.TOAST_CLIENT_ID }}" >> src/main/config/.env
          echo "CLIENT_SECRET=${{ secrets.TOAST_CLIENT_SECRET }}" >> src/main/config/.env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> src/main/config/.env
          echo "TOAST_URL=${{ secrets.TOAST_URL }}" >> src/main/config/.env
          echo "TOKEN_EXPIRES_IN=${{ secrets.TOKEN_EXPIRES_IN }}" >> src/main/config/.env

      - name: Prepare for app notarization 🔑
        if: matrix.os == 'macos-latest' # Only run for macOS builds
        run: |
          # Setup keys for macOS app notarization
          mkdir -p ~/private_keys/
          echo '${{ secrets.API_KEY_SECRET }}' > ~/private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8

      - name: Build/release Electron app 📦
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GHP_TOKEN }}
          mac_certs: ${{ secrets.APPLE_CERTIFICATE_BASE64_DEV }} # macOS code signing certificate
          mac_certs_password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }} # Certificate password
          release: ${{ startsWith(github.ref, 'refs/tags/v') }} # Only release when tag starts with v
        env:
          # macOS notarization API keys
          API_KEY_ID: ${{ secrets.API_KEY_ID }}
          API_KEY_ISSUER_ID: ${{ secrets.API_KEY_ISSUER_ID }}
          # Additional notarization variables
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

      - name: Upload artifacts 🚚
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts # Distinguish artifacts by OS
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.dmg
            dist/*.exe
            dist/*.zip
          if-no-files-found: ignore # Don't fail if no files are found

  # Release job: Attach built artifacts to GitHub release
  release:
    needs: build # Run after build job completes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code 🛎️
        uses: actions/checkout@v4

      - name: Download all artifacts 🚚
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts to artifacts directory

      - name: Create Release in Current Repo 📦
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }} # Use current tag name
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md # 생성된 변경 이력 파일 사용
          draft: false
          prerelease: false
          files: | # List of files to attach to the release
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.dmg
            artifacts/**/*.exe
            artifacts/**/*.zip

      - name: Create Release in Releases Repo 🚀
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
        with:
          repository: opspresso/toast-dist # Also create release in distribution repository
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md # 생성된 변경 이력 파일 사용
          draft: false
          prerelease: false
          files: | # List of files to attach to the release
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.dmg
            artifacts/**/*.exe
            artifacts/**/*.zip

      - name: Trigger for Homebrew 🚀
        uses: opspresso/action-builder@master
        with:
          args: --dispatch
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
          GITOPS_REPO: "opspresso/homebrew-tap" # Homebrew tap repository
          PROJECT: "toast" # Project name
          VERSION: ${{ github.ref_name }} # Current tag version

      - name: Delete existing draft releases 🧹
        run: |
          echo "🔍 Checking for existing draft releases for tag ${{ github.ref_name }}..."

          # Get list of releases for this tag
          RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GHP_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            jq -r '.[] | select(.tag_name == "${{ github.ref_name }}") | {id: .id, draft: .draft, name: .name}')

          # Check if there are any draft releases
          DRAFT_RELEASES=$(echo "$RELEASES" | jq -r 'select(.draft == true) | .id')

          if [ -n "$DRAFT_RELEASES" ]; then
            echo "🗑️ Found draft releases to delete:"
            echo "$RELEASES" | jq -r 'select(.draft == true) | "ID: \(.id), Name: \(.name)"'

            # Delete each draft release
            for RELEASE_ID in $DRAFT_RELEASES; do
              echo "🗑️ Deleting draft release with ID: $RELEASE_ID"
              curl -s -X DELETE -H "Authorization: token ${{ secrets.GHP_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
            done

            echo "✅ Successfully deleted draft releases"
          else
            echo "✅ No draft releases found for tag ${{ github.ref_name }}"
          fi
