name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest] # ubuntu-latest Ï†úÍ±∞

    steps:
      - name: Checkout code üõéÔ∏è
        uses: actions/checkout@v4

      - name: Setup Node.js üì¶
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies üì¶
        run: npm ci

      - name: Configure environment variables üîë
        run: |
          echo "CLIENT_ID=${{ secrets.TOAST_CLIENT_ID }}" >> src/main/config/.env
          echo "CLIENT_SECRET=${{ secrets.TOAST_CLIENT_SECRET }}" >> src/main/config/.env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> src/main/config/.env
          echo "TOAST_URL=${{ secrets.TOAST_URL }}" >> src/main/config/.env
          echo "TOKEN_EXPIRES_IN=${{ secrets.TOKEN_EXPIRES_IN }}" >> src/main/config/.env

      - name: Prepare for app notarization üîë
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.API_KEY_SECRET }}' > ~/private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8

      - name: Build/release Electron app üì¶
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GHP_TOKEN }}
          mac_certs: ${{ secrets.APPLE_CERTIFICATE_BASE64_DEV }}
          mac_certs_password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          # macOS notarization API key
          API_KEY_ID: ${{ secrets.API_KEY_ID }}
          API_KEY_ISSUER_ID: ${{ secrets.API_KEY_ISSUER_ID }}
          # Additional notarization variables
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

      - name: Upload artifacts üöö
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.dmg
            dist/*.exe
            dist/*.zip
          if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download all artifacts üöö
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release in Current Repo üì¶
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.dmg
            artifacts/**/*.exe
            artifacts/**/*.zip

      - name: Create Release in Releases Repo üöÄ
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
        with:
          repository: opspresso/releases
          tag_name: toast-${{ github.ref_name }}
          name: Toast App ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.dmg
            artifacts/**/*.exe
            artifacts/**/*.zip

      - name: Trigger for Homebrew üöÄ
        uses: opspresso/action-builder@master
        with:
          args: --dispatch
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
          GITOPS_REPO: "opspresso/homebrew-tap"
          PROJECT: "toast"
          VERSION: ${{ github.ref_name }}
