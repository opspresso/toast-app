name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # macOS에서만 인증서 설정
      - name: Setup macOS certificates
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.API_KEY_SECRET }}' > ~/private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.GHP_TOKEN }}
          mac_certs: ${{ secrets.MAC_CERTS }}
          mac_certs_password: ${{ secrets.MAC_CERTS_PASSWORD }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          # macOS notarization API key
          API_KEY_ID: ${{ secrets.API_KEY_ID }}
          API_KEY_ISSUER_ID: ${{ secrets.API_KEY_ISSUER_ID }}

      # - name: Build for macOS
      #   if: matrix.os == 'macos-latest'
      #   run: npm run build:mac
      #   env:
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #     CSC_LINK: certificate.p12
      #     CSC_KEY_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      #     GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}

      # - name: Build for Windows
      #   if: matrix.os == 'windows-latest'
      #   run: npm run build:win
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}

      # - name: Build for Linux
      #   if: matrix.os == 'ubuntu-latest'
      #   run: npm run build
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}

      # macOS에서만 keychain 정리
      - name: Clean up keychain
        if: matrix.os == 'macos-latest' && always()
        run: |
          rm certificate.p12
          # security delete-keychain build.keychain

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            dist/*.dmg
            dist/*.zip
            dist/*.exe
            dist/*.AppImage
            dist/*.deb
          if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.exe
            artifacts/**/*.AppImage
            artifacts/**/*.deb
