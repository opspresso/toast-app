# PR Workflow: Automatically increments version when a new PR is created or updated
# This workflow performs the following tasks:
# 1. Retrieves version information from GitHub releases and the VERSION file
# 2. Increments the patch version based on the higher of the two versions
# 3. Updates the new version in both package.json and VERSION file
# 4. Changes the PR title to "Release [new version]"

name: Bump Package

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch complete history

      - name: Bump Version 🏷️
        id: bump
        run: |
          echo "Bumping version"

          # Read current version from VERSION file and strip 'v' prefix if present
          CURRENT_VERSION_RAW=$(cat ./VERSION | xargs)
          CURRENT_VERSION="${CURRENT_VERSION_RAW#v}"
          echo "Current version: $CURRENT_VERSION"

          # Parse current version (major.minor.patch)
          CUR_MAJOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f1)
          CUR_MINOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f2)
          CUR_PATCH=$(echo "$CURRENT_VERSION" | cut -d'.' -f3)

          # Get latest release version from GitHub
          LAST_VERSION=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          CLEANED_VERSION="${LAST_VERSION#v}"
          echo "Last version (raw): $LAST_VERSION"
          echo "Last version (cleaned): $CLEANED_VERSION"

          # Parse latest release version
          REL_MAJOR=$(echo "$CLEANED_VERSION" | cut -d'.' -f1)
          REL_MINOR=$(echo "$CLEANED_VERSION" | cut -d'.' -f2)
          REL_PATCH=$(echo "$CLEANED_VERSION" | cut -d'.' -f3)

          # Use the higher version between VERSION file and GitHub release
          if [[ "$REL_MAJOR" -gt "$CUR_MAJOR" ]] || \
            ([[ "$REL_MAJOR" -eq "$CUR_MAJOR" ]] && [[ "$REL_MINOR" -gt "$CUR_MINOR" ]]) || \
            ([[ "$REL_MAJOR" -eq "$CUR_MAJOR" ]] && [[ "$REL_MINOR" -eq "$CUR_MINOR" ]] && [[ "$REL_PATCH" -gt "$CUR_PATCH" ]]); then
            # If GitHub release version is higher, increment patch version from that
            MAJOR=$REL_MAJOR
            MINOR=$REL_MINOR
            PATCH=$((REL_PATCH + 1))
          else
            # If VERSION file version is higher or equal, increment patch version from that
            MAJOR=$CUR_MAJOR
            MINOR=$CUR_MINOR
            PATCH=$((CUR_PATCH + 1))
          fi

          # Create new version (with v prefix)
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"

          # Update new version to package.json and VERSION file (only if changed)
          if [[ "$(jq -r .version package.json)" != "$NEW_VERSION" ]]; then
            # Update package.json
            jq --arg version "$NEW_VERSION" '.version = $version' package.json > tmp.json && mv tmp.json package.json
            git add package.json

            # Update VERSION file
            echo "$NEW_VERSION" > VERSION
            git add VERSION

            echo "Updated package.json and VERSION file to $NEW_VERSION"
          else
            echo "package.json already has version $NEW_VERSION, skipping update"
          fi

          # Setup git user
          git config --local user.name "nalbam-bot"
          git config --local user.email "bot@nalbam.com"

          # Commit and push only if there are staged changes
          if ! git diff --cached --quiet; then
            git commit -m "Bump version to $NEW_VERSION"
            git push origin HEAD:$HEAD_REF
          else
            echo "No changes to commit, skipping git commit and push"
          fi

          # Change PR title
          echo "Retitling pull request to 'Release $NEW_VERSION'"
          gh pr edit ${{ github.event.pull_request.number }} --title "Release $NEW_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HEAD_REF: ${{ github.head_ref }}
