# Main Branch Push Workflow: Performs tagging and release when code is merged to the main branch
# This workflow performs the following tasks:
# 1. Gets version from package.json
# 2. Creates and pushes a Git tag with that version (only if it doesn't already exist)
# 3. Automatically creates a GitHub release when a new tag is created
# This workflow uses the version information updated by the PR workflow to create releases

name: Tag and Release

on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch complete history

      - name: Get Version and Create Tag 🏷️
        id: get_version
        run: |
          # Get version from package.json
          PKG_VERSION=$(jq -r .version package.json)
          echo "📦 Retrieved version from package.json: $PKG_VERSION"

          # Ensure version has 'v' prefix for tagging
          if [[ "$PKG_VERSION" != v* ]]; then
            VERSION="v$PKG_VERSION"
            echo "🔄 Adding 'v' prefix for tagging: $VERSION"
          else
            VERSION="$PKG_VERSION"
            echo "✅ Version already has 'v' prefix: $VERSION"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Setup git user
          echo "👤 Setting up git user for commit"
          git config --local user.name "nalbam-bot"
          git config --local user.email "bot@nalbam.com"

          # Try to get PR title and body from GitHub API
          PR_NUMBER=$(git log -1 --pretty=%s | grep -o '#[0-9]\+' | grep -o '[0-9]\+')
          if [ -n "$PR_NUMBER" ]; then
            echo "🔍 Found PR #$PR_NUMBER, fetching PR data from GitHub API"

            # Fetch PR details from GitHub API
            PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")

            # Extract title and body separately
            PR_TITLE=$(echo "$PR_DATA" | jq -r .title)
            PR_BODY=$(echo "$PR_DATA" | jq -r .body)

            # Save original values to files for reference (if needed later)
            echo "$PR_TITLE" > pr_title.txt
            echo "$PR_BODY" > pr_body.txt

            echo "📄 Using PR title: $PR_TITLE"

            # Complete cleanup of PR body to create a compact message
            if [ -n "$PR_BODY" ] && [ "$PR_BODY" != "null" ]; then
              # Create a temporary file for multiline processing
              echo "$PR_BODY" > pr_body_temp.txt

              # Remove HTML comments (including multiline)
              sed -i -e '/<!--/,/-->/d' pr_body_temp.txt

              # Remove empty lines and leading/trailing whitespace
              sed -i -e '/^[[:space:]]*$/d' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' pr_body_temp.txt

              # Create a compact version with minimal whitespace
              PR_BODY_CLEAN=$(cat pr_body_temp.txt | tr '\n' ' ' | sed -e 's/[[:space:]]\+/ /g')

              # Format the final message - just title and compact body
              PR_BODY_JSON="$PR_TITLE"$'\n'"$PR_BODY_CLEAN"
              echo "📝 Retrieved PR title and compact body"
            else
              PR_BODY_JSON="$PR_TITLE"
              echo "📝 Retrieved PR title (no body found)"
            fi

            # Save combined message to a file
            echo "$PR_BODY_JSON" > pr_combined.txt

            # Use combined title and body for PR_MESSAGE
            # This ensures both title and body are included in the tag message
            PR_MESSAGE="$PR_BODY_JSON"
          fi

          # Use default message if we couldn't get PR message
          if [ -z "$PR_MESSAGE" ] || [ "$PR_MESSAGE" == "null" ]; then
            PR_MESSAGE="Release $VERSION"
            echo "⚠️ No PR message found, using default: 'Release $VERSION'"
          else
            # Ensure PR_MESSAGE is safe for use in git commands by escaping special characters
            PR_MESSAGE=$(echo "$PR_MESSAGE" | sed 's/"/\\"/g')
            echo "📄 Using PR message for tag: $PR_MESSAGE"
          fi

          # Create and push new tag only if it doesn't exist
          if ! git tag | grep -q "^$VERSION$"; then
            echo "🏷️ Creating new tag: $VERSION with PR message"
            # Use the PR_MESSAGE safely with proper quoting
            git tag -a "$VERSION" -m "${PR_MESSAGE}"
            git push origin $VERSION
            echo "TAG_CREATED=true" >> $GITHUB_ENV
            echo "✅ Successfully created and pushed tag $VERSION"
          else
            echo "⏭️ Tag $VERSION already exists, skipping tag creation"
            echo "TAG_CREATED=false" >> $GITHUB_ENV
          fi

      - name: Trigger Build Workflow 🔄
        run: |
          if [[ "$TAG_CREATED" == 'true' ]]; then
            echo "🔄 Triggering build workflow for version $VERSION"
            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/dispatches \
              -d "{\"ref\":\"refs/tags/$VERSION\"}"
            echo "✅ Build workflow triggered successfully for version $VERSION"
          fi
